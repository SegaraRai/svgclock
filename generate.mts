import { writeFile } from "node:fs/promises";

const DIGITS = [0x7e, 0x30, 0x6d, 0x79, 0x33, 0x5b, 0x5f, 0x70, 0x7f, 0x7b];
const POLYS = [
  "12,90 22,81 79,81 88,90 79,100 22,100",
  "10,88 0,79 0,22 10,12 20,22 20,79",
  "10,168 0,159 0,102 10,92 20,102 20,159",
  "88,170 79,180 22,180 12,170 22,161 79,161",
  "90,92 100,102 100,159 90,168 80,159 80,102",
  "90,12 100,22 100,79 90,88 80,79 81,22",
  "12,10 22,1 79,0 88,10 79,20 22,20",
];
const CHANGE_DURATION = 0.1;

const SKEW_X = "-12.5";
const FILL_COLOR = "#2871fc";
const VIEW_BOX = "-40 -10 920 200";

const DISPLAYS = [
  {
    add: 3600,
    div: 36000,
    period: 24 * 60 * 60,
    x: 140 * 0 + 40 * 0,
  },
  {
    add: 3600,
    div: 3600,
    period: 24 * 60 * 60,
    x: 140 * 1 + 40 * 0,
  },
  {
    add: null,
    div: null,
    period: null,
    x: 140 * 2 + 40 * 0,
  },
  {
    add: 600,
    div: 600,
    period: 60 * 60,
    x: 140 * 2 + 40 * 1,
  },
  {
    add: 60,
    div: 60,
    period: 10 * 60,
    x: 140 * 3 + 40 * 1,
  },
  {
    add: null,
    div: null,
    period: null,
    x: 140 * 4 + 40 * 1,
  },
  {
    add: 10,
    div: 10,
    period: 60,
    x: 140 * 4 + 40 * 2,
  },
  {
    add: 1,
    div: 1,
    period: 10,
    x: 140 * 5 + 40 * 2,
  },
] as const;

const getClassName = (k: number, i: number): string =>
  `p${k.toString(36)}${i.toString(36)}`;

function calculateDisplays() {
  type Poly = { c: string; i: number; k: number[] };
  type CalculatedDisplay = { x: number; k: number; m: number; p: Poly[] };

  const calculated: CalculatedDisplay[] = [];
  for (const [k, { add, div, period, x }] of DISPLAYS.entries()) {
    if (!add || !div || !period) {
      continue;
    }

    const polys: Poly[] = [];

    for (const i of POLYS.keys()) {
      const keyframes: number[] = [];
      let prev: boolean | undefined;
      for (let t = 0; t <= period; t += add) {
        const sec = t;
        const n = Math.floor((sec % period) / div) % 10;
        const on = !!(DIGITS[n] & (1 << i));
        if (prev == null) {
          prev = on;
        } else if (prev !== on) {
          keyframes.push(((sec / period) % 1) * 100);
          keyframes.push((((sec + CHANGE_DURATION) / period) % 1) * 100);
          prev = on;
        }
      }

      if (prev == null) {
        // unreachable
        throw new Error("prev == null");
      }

      polys.push({
        c: getClassName(k, i),
        i: prev ? 0 : 2,
        k: keyframes,
      });
    }

    calculated.push({
      x,
      k: (1 / (period * 1000)) * 100,
      m: period * 1000,
      p: polys,
    });
  }
  return calculated;
}

function createTemplate(): string {
  const getId = (i: number): string => `s${i.toString(36)}`;
  const polyToPath = (poly: string): string => `M${poly.replaceAll(" ", "L")}Z`;

  const texts: string[] = [];

  texts.push(
    `<svg xmlns="http://www.w3.org/2000/svg" viewBox="${VIEW_BOX}">\n`
  );

  texts.push("<style>\n");
  texts.push("%style%\n");
  texts.push(".u { display: none; opacity: 0; }\n");
  texts.push("</style>\n");

  texts.push("<defs>\n");
  for (const [i, poly] of POLYS.entries()) {
    texts.push(`<path id="${getId(i)}" d="${polyToPath(poly)}" />\n`);
  }
  texts.push("</defs>\n");

  texts.push(
    `<g transform="skewX(${SKEW_X})" stroke="none" fill="${FILL_COLOR}">\n`
  );

  for (const [k, display] of DISPLAYS.entries()) {
    texts.push(`<g transform="translate(${display.x}, 0)">\n`);
    if (display.div) {
      for (const i of POLYS.keys()) {
        texts.push(
          `<use href="#${getId(i)}" class="${getClassName(k, i)}" />\n`
        );
      }
    } else {
      texts.push('<circle cx="0" cy="40" r="10" />\n');
      texts.push('<circle cx="0" cy="140" r="10" />\n');
    }
    texts.push("</g>\n");
  }

  texts.push("</g>\n");

  texts.push("%extraContent%");

  texts.push('<g class="u">\n');
  texts.push(`<a href="%linkURL%">\n`);
  texts.push(
    '<text x="860" y="235" stroke="none" fill="#2871fc" font-size="50" text-anchor="end" font-family="Verdana, Arial, Helvetica, sans-serif">'
  );
  texts.push("Not working?");
  texts.push("</text>\n");
  texts.push("</a>\n");
  texts.push("</g>\n");
  texts.push("</svg>\n");

  const variableSet: Set<string> = new Set();

  const returnText = texts
    .join("")
    .replaceAll("\\", "\\\\")
    .replaceAll("$", "\\$")
    .replace(/%(\w+)%/g, (_, str): string => {
      variableSet.add(str);
      return `\${${str}}`;
    });

  return `({${Array.from(variableSet).join(", ")}}: {${Array.from(variableSet)
    .map((v) => `${v}: string;`)
    .join(" ")}}) {\n  return \`${returnText}\`;\n}\n`;
}

const script = `
// auto-generated by calculate.ts

export const PRECALCULATED_DISPLAYS = ${JSON.stringify(
  calculateDisplays(),
  null,
  2
)} as const;

export function createSVG${createTemplate()}
`;

await writeFile("workers/generated.ts", script);
